PWMs[["HUVEC"]] = as.matrix(read.delim(paste(motif_folder, "/", "HUVEC.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HUVEC"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HUVEC"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HeLa-S3"]] = as.matrix(read.delim(paste(motif_folder, "/", "HeLa-S3.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HeLa-S3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HeLa-S3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HepG2"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
    configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]#
    png(paste0(output_folder, "/", "diffLogoTable.png"),width=10 * 16/10, height = 10, units="in", res=300);#
        drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );#
    dev.off()#
#
    pdf(paste0(output_folder, "/", "diffLogoTable.pdf"),width=10 * 16/10, height = 10);#
        drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );#
    dev.off()
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
PWMs[["HUVEC"]] = as.matrix(read.delim(paste(motif_folder, "/", "HUVEC.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HUVEC"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HUVEC"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HeLa-S3"]] = as.matrix(read.delim(paste(motif_folder, "/", "HeLa-S3.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HeLa-S3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HeLa-S3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HepG2"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
    configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]#
    png(paste0(output_folder, "/", "diffLogoTable.png"),width=10 * 16/10, height = 10, units="in", res=300);#
        drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );#
    dev.off()#
#
    pdf(paste0(output_folder, "/", "diffLogoTable.pdf"),width=10 * 16/10, height = 10);#
        drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );#
    dev.off()
PWMs
PWMs[["H1-hESC"]] = as.matrix(read.delim(paste(motif_folder, "/", "H1-hESC.pwm", sep=""), header=F))#
        if(nrow(PWMs[["H1-hESC"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["H1-hESC"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
PWMs[["H1-hESC"]]
test = PWMs[["H1-hESC"]]
seqLogo(test)
seqLogo(rev(test))
diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);
PWMs[["H1-hESC"]] = rev(test)
diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);
traceback()
source("../DiffLogo/R/diffSeqLogo.R");
diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/3c208692-c64a-4d64-aae3-7d6f51aef389/upload"#
output_folder = "files/3c208692-c64a-4d64-aae3-7d6f51aef389/output/1485511518439"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["HeLa-S3"]] = as.matrix(read.delim(paste(motif_folder, "/", "HeLa-S3.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HeLa-S3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HeLa-S3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HepG2"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/3c208692-c64a-4d64-aae3-7d6f51aef389/upload"#
output_folder = "files/3c208692-c64a-4d64-aae3-7d6f51aef389/output/1485511518439"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["HeLa-S3"]] = as.matrix(read.delim(paste(motif_folder, "/", "HeLa-S3.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HeLa-S3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HeLa-S3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HepG2"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
plot(diffLogo)
diffLogo(diffLogoObj)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogo(diffLogoObj)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogo(diffLogoObj)
diffLogoObj
diffLogoObj$heights
rep(0,10)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
traceback
traceback()
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
traceback()
pwm1
PWMs[[1]]
PWMs[[2]]
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
traceback()
traceback()
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogoObj$heights
diffLogo(diffLogoObj)
diffLogo(diffLogoObj, ymin=-0.001, ymax=0.001)
diffLogoObj$heights[8]
diffLogoObj$heights[9]
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogo(diffLogoObj, ymin=-0.001, ymax=0.001)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogo(diffLogoObj, ymin=-0.001, ymax=0.001)
diffLogo(diffLogoObj, ymin=-0.0001, ymax=0.0001)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogo(diffLogoObj, ymin=-0.0001, ymax=0.0001)
diffLogo(diffLogoObj)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
source("../DiffLogo/R/diffSeqLogo.R");#
diffLogoObj = createDiffLogoObject(pwm1 = PWMs[[1]], pwm2 = PWMs[[2]],alphabet=alphabet, align_pwms=T)
diffLogo(diffLogoObj)
8*30*0.8*0.75
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485810322657"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
configuration[['enableClustering']] = FALSE;
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration[['enableClustering']] = FALSE
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
configuration
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
apply(PWMs, ncol)
apply(PWMs, 1, ncol)
PWMs
length(PWMs)
arrayfun
lapply(PWMs, length)
lapply(PWMs, ncol)
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
matrix(0, 6,6)
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/upload"#
output_folder = "files/37b14bcc-1b6c-4366-8a04-e8460baf0c4a/output/1485811490432"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["2"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["2"]] = rev(PWMs[["2"]]);#
        PWMs[["3"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000ALJ_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["4"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AMA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["4"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["4"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        # switch orientation if possible#
        if(currentAlphabet$supportReverseComplement) PWMs[["4"]] = rev(PWMs[["4"]]);#
        PWMs[["5"]] = as.matrix(read.delim(paste(motif_folder, "/", "ENCSR000AOA_CTCF-human_1_hg19-predictions-1.pwm", sep=""), header=F))#
        if(nrow(PWMs[["5"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["5"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/c9f3cf21-3965-4441-ae3c-0ae58b981510/upload"#
output_folder = "files/c9f3cf21-3965-4441-ae3c-0ae58b981510/output/1485851637692"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["HepG2_short"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2_short.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2_short"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2_short"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["H1-hESC"]] = as.matrix(read.delim(paste(motif_folder, "/", "H1-hESC.pwm", sep=""), header=F))#
        if(nrow(PWMs[["H1-hESC"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["H1-hESC"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HeLa-S3"]] = as.matrix(read.delim(paste(motif_folder, "/", "HeLa-S3.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HeLa-S3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HeLa-S3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HepG2"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
configuration = list();#
    configuration[['ratio']] = 16/10;#
    diffLogoTable = prepareDiffLogoTable(PWMs,alphabet,configuration);#
    diffLogoObjMatrix = diffLogoTable[['diffLogoObjMatrix']]#
    hc = diffLogoTable[['hc']]#
    PWMs = diffLogoTable[['PWMs']]
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/c9f3cf21-3965-4441-ae3c-0ae58b981510/upload"#
output_folder = "files/c9f3cf21-3965-4441-ae3c-0ae58b981510/output/1485851637692"#
PWMs = list()#
#
alphabet = NULL;#
        PWMs[["HepG2_short"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2_short.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2_short"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2_short"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["H1-hESC"]] = as.matrix(read.delim(paste(motif_folder, "/", "H1-hESC.pwm", sep=""), header=F))#
        if(nrow(PWMs[["H1-hESC"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["H1-hESC"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HeLa-S3"]] = as.matrix(read.delim(paste(motif_folder, "/", "HeLa-S3.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HeLa-S3"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HeLa-S3"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
        PWMs[["HepG2"]] = as.matrix(read.delim(paste(motif_folder, "/", "HepG2.pwm", sep=""), header=F))#
        if(nrow(PWMs[["HepG2"]]) == length(DNA$chars)) {#
            currentAlphabet = DNA;#
        } else if(nrow(PWMs[["HepG2"]]) == length(ASN$chars)) {#
            currentAlphabet = ASN;#
        } else {#
            stop("The given PWM has an unkown size of rows.")#
        }#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }
drawDiffLogoTable(PWMs, diffLogoObjMatrix, hc, alphabet, configuration );
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
#
motif_folder = "files/f4830948-fa91-4874-a355-7ea924635690/upload"#
output_folder = "files/f4830948-fa91-4874-a355-7ea924635690/seqLogos"#
        currentAlphabet = NULL;#
lines = getSequencesFromAlignmentFile(paste0(motif_folder, "/Mad.txt"));
suppressMessages(library(cba))#
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
source("../DiffLogo/R/diffSeqLogoSupport.R");#
source("../DiffLogo/R/pwmAlignment.R");#
source("../DiffLogo/R/diffSeqLogo.R");#
motif_folder = "files/f4830948-fa91-4874-a355-7ea924635690/upload"#
output_folder = "files/f4830948-fa91-4874-a355-7ea924635690/output/1486474083888"#
PWMs = list()#
#
alphabet = NULL;#
            lines = getSequencesFromAlignmentFile(paste0(motif_folder, "/Mad.txt"));
chars = unique(strsplit(paste(lines,collapse=""), "")[[1]]);#
        DNAchars = sort(unique(strsplit(gsub("-","",paste(lines,collapse="")), "")[[1]]));#
        ASNchars = sort(unique(strsplit(gsub("[BZX-]","",paste(lines,collapse="")), "")[[1]]));#
        if( length(setdiff(DNAchars, DNA$chars))==0 ) {#
            currentAlphabet = DNA;#
        } else if ( length(setdiff(ASNchars, ASN$chars))==0 ) {#
            currentAlphabet = ASN;     #
        } else if ( length(setdiff(RNAchars, RNA$chars))==0 ) {#
            currentAlphabet = RNA;#
        } else {#
            stop("Unsupported alphabet.")#
        }#
        close(con);#
        PWMs[["Mad"]] = getPwmFromAlignment(lines[grep("^[^>]",lines)],alphabet=currentAlphabet,pseudoCount=0);#
    if( is.null(alphabet)) {#
        alphabet = currentAlphabet;#
    } else if( all(alphabet$chars == currentAlphabet$chars) ) {#
#
    } else {#
         stop("Detected at least two different alphabets.");#
    }#
            lines = getSequencesFromAlignmentFile(paste0(motif_folder, "/Max.txt"));
pwm
pwm
matrix(pwm, nrow=4)
m = matrix(pwm, nrow=4)
m
m = matrix(pwm, ncol=4)
m
sum(m[1,])
sum(m[2,])
sum(m[3,])
m
t(m)
sum(t(m)[,1])
source("../DiffLogo/R/alphabet.R");#
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
#
motif_folder = "files/38577487-d389-4d19-a3eb-b82f9384902d/upload"#
output_folder = "files/38577487-d389-4d19-a3eb-b82f9384902d/seqLogos"#
        currentAlphabet = NULL;#
pwm = getPwmFromHomerFile(paste(motif_folder, "/", "CTCF-ENCSR000AUF-motif_1_freqs.txt", sep=""));
getPwmFromHomerFile
filename = paste(motif_folder, "/", "CTCF-ENCSR000AUF-motif_1_freqs.txt", sep="")
pwm = as.matrix(read.delim(filename, header=F));
pwm
gsub("\s+", " ", file)
gsub("\\s+", " ", file)
gsub("a+", " ", file)
file = readLines(filename)
file
gsub("a+", " ", file)
gsub("\\s+", " ", file)
gsub("\\s+", "asdf", file)
gsub("\\s+", " ", file)
lines = readLines(filename);#
    # replace all whitespaces by one " "#
    lines = gsub("\\s+", " ", lines)
pwm = as.matrix(read.delim(lines, sep = " ",header=F));
pwm
tc = textConnection(lines);#
    pwm = as.matrix(read.delim(tc, sep = " ",header=F));#
    close(tc);
pwm
sum(pwm[1,])
sum(t(pwm[,1]))
t(pwm)
a = t(pwm)
sum(a,1)
sum(a[,1])
source("../DiffLogo/R/preconditions.R");#
source("../DiffLogo/R/stackHeights.R");#
source("../DiffLogo/R/baseDistrs.R");#
source("../DiffLogo/R/utilities.R");#
source("../DiffLogo/R/seqLogo.R");#
#
motif_folder = "files/303bd828-3887-40d5-bae5-5c8352f47dd4/upload"#
output_folder = "files/303bd828-3887-40d5-bae5-5c8352f47dd4/seqLogos"#
        currentAlphabet = NULL;#
lines = getSequencesFromAlignmentFile(paste0(motif_folder, "/Max.txt"));
lines
chars = unique(strsplit(paste(lines,collapse=""), "")[[1]]);
chars
DNAchars = sort(unique(strsplit(gsub("-","",paste(lines,collapse="")), "")[[1]]));
DNAchars
chars = unique(strsplit(paste(lines,collapse=""), "")[[1]]);#
DNAchars = sort(unique(strsplit(gsub("-","",paste(lines,collapse="")), "")[[1]]));#
ASNchars = sort(unique(strsplit(gsub("[BZX-]","",paste(lines,collapse="")), "")[[1]]));#
if( length(setdiff(DNAchars, DNA$chars))==0 ) {#
    currentAlphabet = DNA;#
} else if ( length(setdiff(ASNchars, ASN$chars))==0 ) {#
    currentAlphabet = ASN;     #
} else if ( length(setdiff(RNAchars, RNA$chars))==0 ) {#
    currentAlphabet = RNA;#
} else {#
    stop("Unsupported alphabet.")#
}
pwm = getPwmFromAlignment(lines,alphabet=currentAlphabet,pseudoCount=0);
pwm
seqLogo(pwm,sparse=TRUE,alphabet=currentAlphabet);
